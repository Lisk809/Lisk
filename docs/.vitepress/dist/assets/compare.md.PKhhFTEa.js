import{_ as p,C as i,c as l,o as h,j as a,G as e,av as k,a as r}from"./chunks/framework.B-lDWq_f.js";const m=JSON.parse('{"title":"JS 中的==和===","description":"","frontmatter":{},"headers":[],"relativePath":"compare.md","filePath":"compare.md","lastUpdated":null}'),d={name:"compare.md"};function o(g,s,c,E,u,y){const n=i("NolebasePageProperties"),t=i("NolebaseGitChangelog");return h(),l("div",null,[s[0]||(s[0]=a("h1",{id:"js-中的-和",tabindex:"-1"},[r("JS 中的==和=== "),a("a",{class:"header-anchor",href:"#js-中的-和","aria-label":'Permalink to "JS 中的==和==="'},"​")],-1)),e(n),s[1]||(s[1]=k(`<p>在网上冲浪时突然间看见了一个这样的题目(据说来自阿里云面试题)</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>问如何才能让打印的结果为<code>true</code>？</p><p>看完这题你说不定<s>对面试官的心理产生严重的怀疑</s>，但是如果你一看就知道如何做，那你对js的理解已经到了一定深度</p><p>在 JavaScript 中，== 和 === 都是用来比较两个值是否相等的运算符，但他们之间肯定有区别</p><ul><li>== 运算符：用来进行一般比较，检测两个操作数是否相等，可以允许进行类型转换。</li><li>=== 运算符：用于严格比较，只要类型不匹配就返回 false。 对于 string、number 等基础类型，== 和 === 有区别。例如：&quot;1&quot; == true，这个比较中左侧为字符串类型，右侧为布尔类型，左右两侧类型不同，因此会先进行类型转换，把 true 转换为 1，即为 &quot;1&quot; == 1；此时，类型仍不同，继续进行类型转换，把 &quot;1&quot; 转换为 1，即为 1 == 1，最终结果为 true。如果比较：&quot;1&quot; === true，左侧为字符型，右侧为布尔型或数值型，左右两侧类型不同，结果为 false</li></ul><p>在比较对象时，== 和 === 的结果相同，因为它们都是比较对象的引用</p><p>值得注意的是，== 运算符的类型转换可能会导致一些奇怪的结果，尤其是在比较 null 和 undefined 时。例如，null == undefined 的结果为 true，但 null === undefined 的结果为 false</p><p>在实际应用中，应该尽量使用 === 运算符，因为它可以避免类型转换带来的问题。如果需要进行类型转换，应该先手动进行类型转换，再进行比较</p><p>对于 string、number 等基础类型，== 和 === 是有区别的 在比较对象时，== 和 === 的结果相同 应该尽量使用 === 运算符，避免类型转换带来的问题</p><p>此外还有Object.is，它与===差不多，只不过有几种特殊情况，+0和-0会返回false, NaN和NaN会返回true</p><p>题目考察的是==的判断原则</p><p>如果==判断的对象是object怎么办？</p><p>首先会调用.valueOf方法，如果依然是object怎么办？ 那就只能toString了</p><p>所以，到现在你应该有了一个基本的思路: 修改valueOf方法, 自己写一个把原来的覆盖掉 或者toString也可以</p><p>我们题目中比较了三次:</p><ul><li>a==1</li><li>a==2</li><li>a==3</li></ul><p>我们需要都返回<code>true</code>，该如何做呢？</p><p>观察发现，需要第一次比较a=1, 第二次a=2... 那我们可以每次返回调用次数</p><p>所以</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>大功告成, 此时你会发现打印的就是<code>true</code>了</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>如果==判断的对象是object 首先会调用.valueOf方法，如果依然是object, 调用toString</p>`,24)),e(t)])}const f=p(d,[["render",o]]);export{m as __pageData,f as default};
